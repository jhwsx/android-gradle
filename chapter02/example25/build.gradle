// 2.5 闭包
task helloClosure {
    doLast {
        customEach {
            println it
        }

        eachMap { k, v ->
            println "$k => $v"
        }

    }
}

static def customEach(closure1) {
    for (int i in 1..10) {
        closure1(i)
    }
}
// 向闭包传递参数
static def eachMap(closure) {
    def map1 = ["name": "zhangsan", "age": 18]
    map1.each {
        closure(it.key, it.value)
    }
}

// 闭包委托
// Groovy 的闭包有 thisObject，owner，delegate 三个属性
task helloDelegate {
    doLast {
       new Delegate().test {
           println "thisObject:${thisObject.getClass()}"
           println "owner:${owner.getClass()}"
           println "delegate:${delegate.getClass()}"
           method1()
           it.method1()
       }
    }
}

def method1() {
    println "Context this:${this.getClass()} in root"
    println "method1 in root"
}

class Delegate {
    def method1() {
        println "Context this:${this.getClass()} in root"
        println "method1 in Delegate"
    }

    def test(Closure<Delegate> closure) {
        closure(this)
    }
}

task configClosure {
    doLast {
        person {
            personName = "zhangsan"
            personAge = 18
            dumpPerson()
        }
    }
}

class Person {
    String personName
    int personAge

    def dumpPerson() {
        println "name is $personName, age is $personAge"
    }
}

static def person(Closure<Person> closure) {
    Person p = new Person()
    closure.delegate = p
    closure.setResolveStrategy(Closure.DELEGATE_FIRST)
    closure(p)
}

def greeting = {"Hello, $it!"}
// 没有参数的闭包
def noParamClosure = { -> true }

task testClosure {
    doLast {
        // 闭包的两种调用方式
        // 1, 闭包对象(参数)
        println greeting("world")
        // 2, 闭包对象.call(参数)
        println greeting.call("gradle")
        // 如果闭包没定义参数的话，则隐含有一个参数，这个参数名字叫it，和this的作用类似。it代表闭包的参数。
        // noParamClosure.call("") // 报错
        noParamClosure.call() // OK
    }
}