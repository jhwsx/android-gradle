// 集合
task printList {
    doLast {
        def numList = [2, 4, 6, 8, 10]
        println numList.getClass().name // java.util.ArrayList

        println numList[1] // 访问索引为 1 的元素, 是 4
        println numList[-1] // 访问倒数第一个元素，是 10
        println numList[-2] // 访问倒数第二个元素，是 8
        println numList[1..3] // 访问索引从 1 到 3 的元素，是 [4, 6, 8]
        println numList[-0]

        // 迭代操作
        numList.each {
            println it
        }

        println "-----------------"
        // 迭代集合，打印
        for (i in 0..<numList.size()) {
            println numList[i]
        }
    }
}

task printMap {
    doLast {
        def map1 = ['width': 1024, 'height': 768]
        println map1.getClass().name // java.util.LinkedHashMap

        println "map1['width'] = ${map1['width']}" // map1['width'] = 1024
        println "map1.height = ${map1.height}" // map1.height = 768

        // each 方法的参数的闭包，传递1个参数，会被认为是 entry
        map1.each {
            println "Key: ${it.key} => Value: ${it.value}"
        }

        // each 方法的参数的闭包，传递两个参数，会被认为是 key 和 value
        map1.each {key, value ->
            println "$key => $value"
        }
        // 参数需要查询 Groovy 文档 http://www.groovy-lang.org/api.html：闭包的参数是 entry, index
        map1.eachWithIndex { Map.Entry<String, Integer> entry, int index ->
            println "${index}:${entry.key}=>${entry.value}"
        }

        // 参数需要查询 Groovy 文档 http://www.groovy-lang.org/api.html：闭包的参数是 key, value, index
        map1.eachWithIndex{ key, value, i ->
            println "$i:$key=$value"
        }

        def entry = map1.find {
            it.value == 1024
        }
        println "entry = $entry"

        def emptyMap = [:]
        def emtpyList = []
        println "emptyMap.getClass().name=${emptyMap.getClass().name}" // 打印：java.util.LinkedHashMap
        println "emtpyList.getClass().name=${emtpyList.getClass().name}" // 打印：java.util.ArrayList
    }
}

task testIO {
    doLast {
        def file = new File("..\\android-gradle\\chapter02\\example22\\a.txt")
        // 逐行读取 file 中的内容，并打印
        // eachLine 在  ResourceGroovyMethods 类中
        // a closure (arg 1 is line, optional arg 2 is line number starting at line 1)
        file.eachLine {line, lineNum -> // 带行号
            println "$lineNum ${new String(line.bytes, "utf-8")}"
        }
        println "======================"
        file.eachLine {// 只有一个参数就是 line。
            println it
        }

        def url = new URL("https://mp.weixin.qq.com/s/5gYs5_xutYlkrFm9ZzaPzQ")
        url.eachLine {line, lineNum ->
            println "$lineNum $line"
        }
        // 只把 file 中包含 “Hello” 的行写入指定的文件中。
        def fileWriter = new FileWriter("..\\android-gradle\\chapter02\\example22\\b.txt")
        file.filterLine(fileWriter) { String line ->
            line.contains("Hello")
        }
    }
}

task testXML {
    doLast {
        // groovy.util 下的 XmlParser
        def xml = new XmlParser().parse(new File("..\\android-gradle\\chapter02\\example22\\attrs.xml"))
        // 打印根节点的名字
        println xml.name() // 打印：resources
        // 访问 declare-styleable节点的name属性
        println xml['declare-styleable'].@name[0] // 打印：CircleView
        // 访问 declare-styleable 的第三个子节点的内容
        println xml['declare-styleable'].attr[2].text() // 打印：haha
    }
}