buildscript {
    repositories {
        // google maven 仓库
        google()
        // Android Gradle 插件托管在 jcenter 上
        jcenter()

    }
    dependencies {
        // 配置 Android Gradle 插件的 classpath
        // 位置：C:\Users\39233\.gradle\caches\modules-2\files-2.1\com.android.tools.build\gradle\4.1.1\d5145d9dbbe88a1567b6ed988cf24d5965e4fc5b
        classpath 'com.android.tools.build:gradle:4.1.3'
    }
}

// 这里必须加上，不然找不到依赖。
allprojects {
    repositories {
        google()
        jcenter()
    }
}

apply plugin: 'com.android.application'
apply from: 'version.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    // 从 API 23 开始，标准的 Android SDK 中不再包含 HttpClient 库，如果还想使用 HttpClient 库，就必须使用 org.apache.http.legacy 这个可选库
    // 这行表示使用 useLibrary 把这个库添加到 classpath 中
    useLibrary 'org.apache.http.legacy'
    // public abstract val signingConfigs: org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.SigningConfig>
    // signingConfigs 的类型是 NamedDomainObjectContainer，在 signingConfigs {} 中定义的都是一个 SigningConfig
    signingConfigs {
        release { // release 是 SigningConfig 的 name
            storeFile file("releasekey.jks")
            storePassword "123456"
            keyAlias "releasekey"
            keyPassword "123456"
        }
        debug {
            storeFile file("debugkey.jks")
            storePassword "123456"
            keyAlias "debugkey"
            keyPassword "123456"
        }
    }
    defaultConfig {
        applicationId "com.example.example"
        minSdkVersion 16 // 最低支持的 Android 操作系统版本，值为 api level
        targetSdkVersion 30 // 基于哪个 Android 操作系统版本开发
//        versionCode appVersionCode
        versionCode getAppVersionCode()
        // versionName appVersionName
        versionName getAppVersionName()

        testApplicationId "com.example.example.test"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // public abstract val buildTypes: org.gradle.api.NamedDomainObjectContainer<com.android.build.gradle.internal.dsl.BuildType>
    buildTypes { // 构建类型
        // 每一个 BuildType 都会生成一个 SourceSet
        release {
            /*这是 BuildType 类中的方法*/
            buildConfigField("Boolean", "LOG_SWITCH", "false")
            minifyEnabled false // 是否开启 Proguard 混淆
            shrinkResources false // 是否自动清理未使用的资源。
            zipAlignEnabled true // zipalign 是 Android 提供的开启整理优化 apk 文件的工具，能提高系统和应用的运行效率，更快地读写 apk 中的资源，降低内存的使用。
            multiDexEnabled true // 配置该 BuildType 是否启用自动拆分多个 dex 的功能。
            signingConfig signingConfigs.release
            // 混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' // 参数是一个可变类型的参数，可以同时接受多个配置文件。
        }

        debug {
            buildConfigField("Boolean", "LOG_SWITCH", "true")
            applicationIdSuffix = ".debug"
            //versionNameSuffix = "-debug"
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.debug
        }
    }
    flavorDimensions "version"

    productFlavors {
        /*写法一：*/
       /* huawei {
            manifestPlaceholders.put("UMENG_CHANNEL", "huawei")
        }
        vivo {
            manifestPlaceholders.put("UMENG_CHANNEL", "vivo")
        }
        oppo {
            manifestPlaceholders.put("UMENG_CHANNEL", "oppo")
        }*/
        /* 写法二：*/
        huawei {
            /*这是 BaseFlavor 类中的一份方法，给生成的 BuildConfig 类添加一个新的字段*/
            /**
             * String type 字段的类型
             * String name 字段的名字
             * String value 字段的值，如果值为 String 类型，那么里面的双引号一定不能省略，否则会报错。value 的值
             * 是什么就写什么，要原封不动地放在单引号里面。
             */
            buildConfigField("String", "WEB_URL", '"https://www.huawei.com"')
            /**
             * Adds a new generated resource.
             *
             *
             * This is equivalent to specifying a resource in res/values.
             *
             *
             * See [Resource Types](http://developer.android.com/guide/topics/resources/available-resources.html).
             *
             * @param type the type of the resource
             * @param name the name of the resource
             * @param value the value of the resource
             */
            // 生成位置：build\generated\res\resValues\oppo\debug\values
            resValue('string', 'channel_tips', 'huawei 渠道，你好')
        }
        vivo {
            buildConfigField("String", "WEB_URL", '"https://www.vivo.com"')
            resValue('string', 'channel_tips', 'vivo 渠道，你好')
        }
        oppo {
            buildConfigField("String", "WEB_URL", '"https://www.oppo.com"')
            resValue('string', 'channel_tips', 'oppo 渠道，你好')
        }


    }

    productFlavors.all { flavor ->
        manifestPlaceholders.put("UMENG_CHANNEL", name)
    }

    // applicationVariants 是 DomainObjectSet<ApplicationVariant> 类型，这是一个 DomainObjectCollection，可以通过 all 方法进行遍历
    // TODO 为什么这块代码点不进去？
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFile.name.endsWith(".apk")
                    && 'release' == variant.buildType.name) {
                def flavorName = variant.flavorName.startsWith("_") ? variant.flavorName.substring(1) : variant.flavorName
                outputFileName = "Example09_${flavorName}_v${variant.versionName}_${buildTime()}.apk"
            }
        }
    }

    /*Java 编译选项*/
    compileOptions {
        /*CompileOptions 类*/
        encoding = 'utf-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    /*adb 操作选项配置*/
    adbOptions {
        /*AdbOptions 类*/
        timeOutInMs = 5 * 1000
        /**
         https://github.com/mzlogin/awesome-adb#%E5%AE%89%E8%A3%85-apk
         adb install 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：
         参数	含义
         -l	将应用安装到保护目录 /mnt/asec
         -r	允许覆盖安装
         -t	允许安装 AndroidManifest.xml 里 application 指定 android:testOnly="true" 的应用
         -s	将应用安装到 sdcard
         -d	允许降级覆盖安装
         -g	授予所有运行时权限
         */
        installOptions '-r','-s'
    }

    dexOptions {
        /*DexOptions类*/
        threadCount 2
        incremental true // 是否启动用 dx 的增量模式，默认是 false。
        javaMaxHeapSize '4g' // 配置执行 dx 命令时分配的最大堆内存。
        jumboMode true
    }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd-HHmmss", TimeZone.getTimeZone("GMT+08"))
}
/**
 * 从 git tag 中获取应用的版本名称
 *
 * @return git tag 的名称
 */
def getAppVersionName() {
    def stdout = new ByteArrayOutputStream()
    // exec 是 Project 类中的一个方法
    exec {
        commandLine 'git','describe','--abbrev=0','--tags'
        setStandardOutput(stdout)
    }
    return stdout.toString().replace("\n", "") // 移除最后的换行符
}

def getAppVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git','tag','--list' // 获取 git tag 的数量
        setStandardOutput(stdout)
    }
    return stdout.toString().split("\n").size()
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // 依赖这个，可以点进去属性，但是不能运行
//    implementation 'com.android.tools.build:gradle:4.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}