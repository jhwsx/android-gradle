// Project.java 的注释多读一读。
// https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html
// 3.4 创建一个任务
task customTask1 {
    doFirst {
        println 'customTask1:doFirst'
    }
    doLast {
        println 'customTask1:doLast'
    }
}
// 等价的写法是：
// 通过 TaskContainer 对象来创建任务，通过 tasks 来获取这个对象。
tasks.create("customTask2") {
    doFirst {
        println 'customTask2:doFirst'
    }
    doLast {
        println 'customTask2:doLast'
    }
}

tasks.register("customTask3") {
    doFirst {
        println "customTask3:doFirst"
    }
    doLast {
        println "customTask3:doLast"
    }
}
// 运行命令：gradle -q customTask2

// 自定义 Task
class GreetingTask extends DefaultTask {
    String message = "world"

    @TaskAction
    def greetings() {
        println "Hello, $message!"
//        def name = tasks.getByName("customTask2")
//        println "name=" + name
    }

    @TaskAction
    def byes() {
        println "Bye, $message"
    }
}

// 通过 @TaskAction 指定一个 Task 执行时要做的事情
task greeting(type: GreetingTask) // type 表示基于一个存在的 Task 来创建
/*
Hello, world!
Bye, world
 */
task greeting2(type: GreetingTask) { // 闭包里的委托对象就是 GreetingTask 了。
    message = "Gradle"
}
/*
Hello, Gradle!
Bye, Gradle
 */

// 系统默认的 Task，如 Copy，Delete
task copyImage(type: Copy) {
    from "/build1"
    into "/build2"
    include "*.png" // 包含拷贝的文件
    exclude "*.txt" // 排除拷贝的文件
    rename("img.png", "apkbuild.png") // 重命名文件
}

task deleteImage(type: Delete) {
    delete "/build2"
}
// 灵活的任务注册
4.times { counter->
    tasks.register("task_$counter") {
        doLast {
            println "I'm task number $counter"
        }
    }
}
/*
>gradle -q task_0
I'm task number 0
>gradle -q task_1
I'm task number 1
>gradle -q task_2
I'm task number 2
>gradle -q task_3
I'm task number 3

 */